#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        comb1 {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        comb2 {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        comb3 {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        comb4 {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        comb5 {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wh {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SCROLL_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E     &kp R                        &kp T                                                      &kp Y        &kp U  &lt 5 I    &lt 5 O     &kp P
&kp A             &kp S           &kp D     &kp F                        &kp G        &kp LS(LG(S))                  &kp MINUS      &kp H        &kp J  &kp K      &kp L       &kp SQT
&mt LEFT_SHIFT Z  &kp X           &kp C     &kp V                        &kp B        &lt 6 TAB                      &kp SEMI       &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp LS(INTERNATIONAL_1)
&kp LEFT_CONTROL  &lt 1 LEFT_GUI  &kp LALT  &lt_to_layer_0 4 INT_HENKAN  &lt 2 SPACE  &lt_to_layer_0 3 INT_MUHENKAN  &kp BACKSPACE  &lt 1 ENTER                                &kp DELETE
            >;

            sensor-bindings = <&scroll_up_down>, <&scroll_up_down>;
        };

        FUNCTION {
            bindings = <
&kp F4  &trans  &trans  &trans  &trans                   &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans  &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp LS(NUMBER_2)  &kp RIGHT_BRACE      &kp NON_US_HASH    &kp LS(N8)        &kp LS(N9)                                             &kp LS(KP_PLUS)     &kp N7        &kp N8        &kp N9        &kp MINUS
&kp LS(NUMBER_1)  &kp LEFT_BRACE       &kp LS(NUMBER_3)   &kp LS(NUMBER_4)  &kp LS(NUMBER_5)  &kp LA(LC(NUMBER_0))  &kp RS(MINUS)  &kp RS(APOSTROPHE)  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH
&kp LS(NUMBER_7)  &kp LS(RIGHT_BRACE)  &kp LS(BACKSLASH)  &kp LS(COMMA)     &kp LS(PERIOD)    &kp LS(GRAVE)         &kp EQUAL      &kp NUMBER_0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp RS(NUMBER_6)
&trans            &trans               &trans             &trans            &trans            &trans                &trans         &trans                                                        &kp RS(SLASH)
            >;
        };

        ARROW {
            bindings = <
&kp ESC         &kp LS(LC(TAB))     &kp UP_ARROW  &kp LC(TAB)          &trans                   &trans  &kp PG_UP           &kp UP_ARROW    &kp PAGE_DOWN        &kp RIGHT_CONTROL
&kp HOME        &kp LEFT            &kp DOWN      &kp RIGHT_ARROW      &kp END  &kp N1  &trans  &trans  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &trans
&kp LEFT_SHIFT  &kp LA(LEFT_ARROW)  &trans        &kp RA(RIGHT_ARROW)  &trans   &trans  &trans  &trans  &kp RA(LEFT_ARROW)  &trans          &kp RA(RIGHT_ARROW)  &trans
&trans          &trans              &trans        &trans               &trans   &trans  &trans  &trans                                                           &trans
            >;

            sensor-bindings = <&scroll_up_down>, <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&kp F4  &trans  &trans  &trans  &trans                  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp MB1  &mkp MB1  &mkp MB3  &mkp MB2
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
